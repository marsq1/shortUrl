// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShorterClient is the client API for Shorter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShorterClient interface {
	CreateTinyURL(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	GetTinyURL(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	SaveUrl(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error)
}

type shorterClient struct {
	cc grpc.ClientConnInterface
}

func NewShorterClient(cc grpc.ClientConnInterface) ShorterClient {
	return &shorterClient{cc}
}

func (c *shorterClient) CreateTinyURL(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/proto.Shorter/CreateTinyURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shorterClient) GetTinyURL(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/proto.Shorter/GetTinyURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shorterClient) SaveUrl(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error) {
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, "/proto.Shorter/SaveUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShorterServer is the server API for Shorter service.
// All implementations must embed UnimplementedShorterServer
// for forward compatibility
type ShorterServer interface {
	CreateTinyURL(context.Context, *CreateRequest) (*CreateResponse, error)
	GetTinyURL(context.Context, *GetRequest) (*GetResponse, error)
	SaveUrl(context.Context, *SaveRequest) (*SaveResponse, error)
	mustEmbedUnimplementedShorterServer()
}

// UnimplementedShorterServer must be embedded to have forward compatible implementations.
type UnimplementedShorterServer struct {
}

func (UnimplementedShorterServer) CreateTinyURL(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTinyURL not implemented")
}
func (UnimplementedShorterServer) GetTinyURL(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTinyURL not implemented")
}
func (UnimplementedShorterServer) SaveUrl(context.Context, *SaveRequest) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUrl not implemented")
}
func (UnimplementedShorterServer) mustEmbedUnimplementedShorterServer() {}

// UnsafeShorterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShorterServer will
// result in compilation errors.
type UnsafeShorterServer interface {
	mustEmbedUnimplementedShorterServer()
}

func RegisterShorterServer(s grpc.ServiceRegistrar, srv ShorterServer) {
	s.RegisterService(&Shorter_ServiceDesc, srv)
}

func _Shorter_CreateTinyURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorterServer).CreateTinyURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Shorter/CreateTinyURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorterServer).CreateTinyURL(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorter_GetTinyURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorterServer).GetTinyURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Shorter/GetTinyURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorterServer).GetTinyURL(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorter_SaveUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorterServer).SaveUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Shorter/SaveUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorterServer).SaveUrl(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shorter_ServiceDesc is the grpc.ServiceDesc for Shorter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shorter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Shorter",
	HandlerType: (*ShorterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTinyURL",
			Handler:    _Shorter_CreateTinyURL_Handler,
		},
		{
			MethodName: "GetTinyURL",
			Handler:    _Shorter_GetTinyURL_Handler,
		},
		{
			MethodName: "SaveUrl",
			Handler:    _Shorter_SaveUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/tiny.proto",
}
